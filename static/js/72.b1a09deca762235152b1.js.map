{"version":3,"sources":["webpack:///./node_modules/monaco-editor/esm/vs/basic-languages/bicep/bicep.js"],"names":["Object","defineProperty","__webpack_exports__","value","__webpack_require__","d","conf","language","identifier","comments","lineComment","blockComment","brackets","surroundingPairs","open","close","autoClosingPairs","notIn","autoCloseBefore","indentationRules","increaseIndentPattern","RegExp","decreaseIndentPattern","defaultToken","tokenPostfix","token","symbols","keywords","namedLiterals","escapes","tokenizer","root","include","stringVerbatim","regex","action","next","stringLiteral","bracketCounting","comment","whitespace","expression","cases","@keywords","@namedLiterals","@default"],"mappings":"qDAAAA,OAAAC,eAAAC,EAAA,cAAAC,OAAA,IAAAC,EAAAC,EAAAH,EAAA,yBAAAI,IAAAF,EAAAC,EAAAH,EAAA,6BAAAK,IAEA,IAGAC,EAH+B,MAG/B,yBAH+B,MAmBxBF,GACPG,UACAC,YAAA,KACAC,cAAA,YAEAC,WACA,IAAW,MACX,UACA,UAEAC,mBACSC,KAAA,IAASC,MAAA,MACTD,KAAA,IAAAC,MAAA,MACAD,KAAA,IAAAC,MAAA,MACAD,KAAA,IAAAC,MAAA,MACAD,KAAA,MAAAC,MAAA,QAETC,mBACSF,KAAA,IAASC,MAAA,MACTD,KAAA,IAAAC,MAAA,MACAD,KAAA,IAAAC,MAAA,MACAD,KAAA,IAAAC,MAAA,IAAAE,OAAA,sBACAH,KAAA,MAAAC,MAAA,MAAAE,OAAA,sBAETC,gBAAA,gBACAC,kBACAC,sBAAA,IAAAC,OAAA,8DACAC,sBAAA,IAAAD,OAAA,4CAGOd,GACPgB,aAAA,GACAC,aAAA,SACAZ,WACSE,KAAA,IAASC,MAAA,IAAYU,MAAA,oBACrBX,KAAA,IAAAC,MAAA,IAAAU,MAAA,qBACAX,KAAA,IAAAC,MAAA,IAAAU,MAAA,0BAETC,QAAA,sBACAC,UArDA,cACA,WACA,SACA,QACA,MACA,SACA,MACA,KACA,KACA,YA6CAC,eA3CA,uBA4CAC,QAAA,0CACAC,WACAC,OAAgBC,QAAA,gBAA4BA,QAAA,gBAC5CC,iBACaC,MAAA,cAAAC,QAAgCV,MAAA,YAChCS,MAAA,MAAAC,QAAwBV,MAAA,eAAAW,KAAA,UAErCC,gBACaH,MAAA,OAAaC,QAAYV,MAAA,oBAAAW,KAAA,sBACzBF,MAAA,aAAAC,QAA+BV,MAAA,YAC/BS,MAAA,WAAAC,QAA6BV,MAAA,mBAC7BS,MAAA,QAAAC,QAA0BV,MAAA,2BAC1BS,MAAA,IAAAC,QAAsBV,MAAA,SAAAW,KAAA,UAEnCE,kBACaJ,MAAA,IAAUC,QAAYV,MAAA,oBAAAW,KAAA,sBACtBF,MAAA,IAAUC,QAAYV,MAAA,oBAAAW,KAAA,UACtBJ,QAAA,eAEbO,UACaL,MAAA,UAAAC,QAA4BV,MAAA,aAC5BS,MAAA,SAAAC,QAA2BV,MAAA,UAAAW,KAAA,UAC3BF,MAAA,SAAAC,QAA2BV,MAAA,aAExCe,aACaN,MApEb,iBAqEaA,MAAA,SAAAC,QAA2BV,MAAA,UAAAW,KAAA,cAC3BF,MAAA,YAAAC,QAA8BV,MAAA,aAE3CgB,aACaP,MAAA,MAAAC,QAAwBV,MAAA,eAAAW,KAAA,qBACxBF,MAAA,IAAAC,QAAsBV,MAAA,eAAAW,KAAA,oBACtBF,MA1Eb,SA0EaC,QAAiCV,MAAA,YAE9CS,MAAA1B,EACA2B,QACAO,OACAC,aAAsClB,MAAA,WACtCmB,kBAA2CnB,MAAA,WAC3CoB,YAAqCpB,MAAA","file":"static/js/72.b1a09deca762235152b1.js","sourcesContent":["// Copyright (c) Microsoft Corporation.\r\n// Licensed under the MIT License.\r\nvar bounded = function (text) { return \"\\\\b\" + text + \"\\\\b\"; };\r\nvar identifierStart = '[_a-zA-Z]';\r\nvar identifierContinue = '[_a-zA-Z0-9]';\r\nvar identifier = bounded(\"\" + identifierStart + identifierContinue + \"*\");\r\nvar keywords = [\r\n    'targetScope',\r\n    'resource',\r\n    'module',\r\n    'param',\r\n    'var',\r\n    'output',\r\n    'for',\r\n    'in',\r\n    'if',\r\n    'existing'\r\n];\r\nvar namedLiterals = ['true', 'false', 'null'];\r\nvar nonCommentWs = \"[ \\\\t\\\\r\\\\n]\";\r\nvar numericLiteral = \"[0-9]+\";\r\nexport var conf = {\r\n    comments: {\r\n        lineComment: '//',\r\n        blockComment: ['/*', '*/']\r\n    },\r\n    brackets: [\r\n        ['{', '}'],\r\n        ['[', ']'],\r\n        ['(', ')']\r\n    ],\r\n    surroundingPairs: [\r\n        { open: '{', close: '}' },\r\n        { open: '[', close: ']' },\r\n        { open: '(', close: ')' },\r\n        { open: \"'\", close: \"'\" },\r\n        { open: \"'''\", close: \"'''\" }\r\n    ],\r\n    autoClosingPairs: [\r\n        { open: '{', close: '}' },\r\n        { open: '[', close: ']' },\r\n        { open: '(', close: ')' },\r\n        { open: \"'\", close: \"'\", notIn: ['string', 'comment'] },\r\n        { open: \"'''\", close: \"'''\", notIn: ['string', 'comment'] }\r\n    ],\r\n    autoCloseBefore: \":.,=}])' \\n\\t\",\r\n    indentationRules: {\r\n        increaseIndentPattern: new RegExp('^((?!\\\\/\\\\/).)*(\\\\{[^}\"\\'`]*|\\\\([^)\"\\'`]*|\\\\[[^\\\\]\"\\'`]*)$'),\r\n        decreaseIndentPattern: new RegExp('^((?!.*?\\\\/\\\\*).*\\\\*/)?\\\\s*[\\\\}\\\\]].*$')\r\n    }\r\n};\r\nexport var language = {\r\n    defaultToken: '',\r\n    tokenPostfix: '.bicep',\r\n    brackets: [\r\n        { open: '{', close: '}', token: 'delimiter.curly' },\r\n        { open: '[', close: ']', token: 'delimiter.square' },\r\n        { open: '(', close: ')', token: 'delimiter.parenthesis' }\r\n    ],\r\n    symbols: /[=><!~?:&|+\\-*/^%]+/,\r\n    keywords: keywords,\r\n    namedLiterals: namedLiterals,\r\n    escapes: \"\\\\\\\\(u{[0-9A-Fa-f]+}|n|r|t|\\\\\\\\|'|\\\\${)\",\r\n    tokenizer: {\r\n        root: [{ include: '@expression' }, { include: '@whitespace' }],\r\n        stringVerbatim: [\r\n            { regex: \"(|'|'')[^']\", action: { token: 'string' } },\r\n            { regex: \"'''\", action: { token: 'string.quote', next: '@pop' } }\r\n        ],\r\n        stringLiteral: [\r\n            { regex: \"\\\\${\", action: { token: 'delimiter.bracket', next: '@bracketCounting' } },\r\n            { regex: \"[^\\\\\\\\'$]+\", action: { token: 'string' } },\r\n            { regex: '@escapes', action: { token: 'string.escape' } },\r\n            { regex: \"\\\\\\\\.\", action: { token: 'string.escape.invalid' } },\r\n            { regex: \"'\", action: { token: 'string', next: '@pop' } }\r\n        ],\r\n        bracketCounting: [\r\n            { regex: \"{\", action: { token: 'delimiter.bracket', next: '@bracketCounting' } },\r\n            { regex: \"}\", action: { token: 'delimiter.bracket', next: '@pop' } },\r\n            { include: 'expression' }\r\n        ],\r\n        comment: [\r\n            { regex: \"[^\\\\*]+\", action: { token: 'comment' } },\r\n            { regex: \"\\\\*\\\\/\", action: { token: 'comment', next: '@pop' } },\r\n            { regex: \"[\\\\/*]\", action: { token: 'comment' } }\r\n        ],\r\n        whitespace: [\r\n            { regex: nonCommentWs },\r\n            { regex: \"\\\\/\\\\*\", action: { token: 'comment', next: '@comment' } },\r\n            { regex: \"\\\\/\\\\/.*$\", action: { token: 'comment' } }\r\n        ],\r\n        expression: [\r\n            { regex: \"'''\", action: { token: 'string.quote', next: '@stringVerbatim' } },\r\n            { regex: \"'\", action: { token: 'string.quote', next: '@stringLiteral' } },\r\n            { regex: numericLiteral, action: { token: 'number' } },\r\n            {\r\n                regex: identifier,\r\n                action: {\r\n                    cases: {\r\n                        '@keywords': { token: 'keyword' },\r\n                        '@namedLiterals': { token: 'keyword' },\r\n                        '@default': { token: 'identifier' }\r\n                    }\r\n                }\r\n            }\r\n        ]\r\n    }\r\n};\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/monaco-editor/esm/vs/basic-languages/bicep/bicep.js\n// module id = YTUx\n// module chunks = 72"],"sourceRoot":""}