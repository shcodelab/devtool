{"version":3,"sources":["webpack:///./node_modules/monaco-editor/esm/vs/basic-languages/handlebars/handlebars.js"],"names":["Object","defineProperty","__webpack_exports__","value","__webpack_require__","d","conf","language","__WEBPACK_IMPORTED_MODULE_0__fillers_monaco_editor_core_js__","EMPTY_ELEMENTS","wordPattern","comments","blockComment","brackets","autoClosingPairs","open","close","surroundingPairs","onEnterRules","beforeText","RegExp","join","afterText","action","indentAction","IndentAction","IndentOutdent","Indent","defaultToken","tokenPostfix","tokenizer","root","token","switchTo","next","doctype","comment","commentBlock","commentHtml","otherTag","script","nextEmbedded","scriptAfterType","scriptAfterTypeEquals","scriptWithCustomType","scriptEmbedded","style","styleAfterType","styleAfterTypeEquals","styleWithCustomType","styleEmbedded","handlebarsInSimpleState","include","handlebarsInEmbeddedState","handlebarsRoot"],"mappings":"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","file":"static/js/58.4c3eae763ad2f06a4ef4.js","sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nimport { languages } from '../fillers/monaco-editor-core.js';\r\nvar EMPTY_ELEMENTS = [\r\n    'area',\r\n    'base',\r\n    'br',\r\n    'col',\r\n    'embed',\r\n    'hr',\r\n    'img',\r\n    'input',\r\n    'keygen',\r\n    'link',\r\n    'menuitem',\r\n    'meta',\r\n    'param',\r\n    'source',\r\n    'track',\r\n    'wbr'\r\n];\r\nexport var conf = {\r\n    wordPattern: /(-?\\d*\\.\\d\\w*)|([^\\`\\~\\!\\@\\$\\^\\&\\*\\(\\)\\=\\+\\[\\{\\]\\}\\\\\\|\\;\\:\\'\\\"\\,\\.\\<\\>\\/\\s]+)/g,\r\n    comments: {\r\n        blockComment: ['{{!--', '--}}']\r\n    },\r\n    brackets: [\r\n        ['<!--', '-->'],\r\n        ['<', '>'],\r\n        ['{{', '}}'],\r\n        ['{', '}'],\r\n        ['(', ')']\r\n    ],\r\n    autoClosingPairs: [\r\n        { open: '{', close: '}' },\r\n        { open: '[', close: ']' },\r\n        { open: '(', close: ')' },\r\n        { open: '\"', close: '\"' },\r\n        { open: \"'\", close: \"'\" }\r\n    ],\r\n    surroundingPairs: [\r\n        { open: '<', close: '>' },\r\n        { open: '\"', close: '\"' },\r\n        { open: \"'\", close: \"'\" }\r\n    ],\r\n    onEnterRules: [\r\n        {\r\n            beforeText: new RegExp(\"<(?!(?:\" + EMPTY_ELEMENTS.join('|') + \"))(\\\\w[\\\\w\\\\d]*)([^/>]*(?!/)>)[^<]*$\", 'i'),\r\n            afterText: /^<\\/(\\w[\\w\\d]*)\\s*>$/i,\r\n            action: {\r\n                indentAction: languages.IndentAction.IndentOutdent\r\n            }\r\n        },\r\n        {\r\n            beforeText: new RegExp(\"<(?!(?:\" + EMPTY_ELEMENTS.join('|') + \"))(\\\\w[\\\\w\\\\d]*)([^/>]*(?!/)>)[^<]*$\", 'i'),\r\n            action: { indentAction: languages.IndentAction.Indent }\r\n        }\r\n    ]\r\n};\r\nexport var language = {\r\n    defaultToken: '',\r\n    tokenPostfix: '',\r\n    // ignoreCase: true,\r\n    // The main tokenizer for our languages\r\n    tokenizer: {\r\n        root: [\r\n            [/\\{\\{!--/, 'comment.block.start.handlebars', '@commentBlock'],\r\n            [/\\{\\{!/, 'comment.start.handlebars', '@comment'],\r\n            [/\\{\\{/, { token: '@rematch', switchTo: '@handlebarsInSimpleState.root' }],\r\n            [/<!DOCTYPE/, 'metatag.html', '@doctype'],\r\n            [/<!--/, 'comment.html', '@commentHtml'],\r\n            [/(<)(\\w+)(\\/>)/, ['delimiter.html', 'tag.html', 'delimiter.html']],\r\n            [/(<)(script)/, ['delimiter.html', { token: 'tag.html', next: '@script' }]],\r\n            [/(<)(style)/, ['delimiter.html', { token: 'tag.html', next: '@style' }]],\r\n            [/(<)([:\\w]+)/, ['delimiter.html', { token: 'tag.html', next: '@otherTag' }]],\r\n            [/(<\\/)(\\w+)/, ['delimiter.html', { token: 'tag.html', next: '@otherTag' }]],\r\n            [/</, 'delimiter.html'],\r\n            [/\\{/, 'delimiter.html'],\r\n            [/[^<{]+/] // text\r\n        ],\r\n        doctype: [\r\n            [\r\n                /\\{\\{/,\r\n                {\r\n                    token: '@rematch',\r\n                    switchTo: '@handlebarsInSimpleState.comment'\r\n                }\r\n            ],\r\n            [/[^>]+/, 'metatag.content.html'],\r\n            [/>/, 'metatag.html', '@pop']\r\n        ],\r\n        comment: [\r\n            [/\\}\\}/, 'comment.end.handlebars', '@pop'],\r\n            [/./, 'comment.content.handlebars']\r\n        ],\r\n        commentBlock: [\r\n            [/--\\}\\}/, 'comment.block.end.handlebars', '@pop'],\r\n            [/./, 'comment.content.handlebars']\r\n        ],\r\n        commentHtml: [\r\n            [\r\n                /\\{\\{/,\r\n                {\r\n                    token: '@rematch',\r\n                    switchTo: '@handlebarsInSimpleState.comment'\r\n                }\r\n            ],\r\n            [/-->/, 'comment.html', '@pop'],\r\n            [/[^-]+/, 'comment.content.html'],\r\n            [/./, 'comment.content.html']\r\n        ],\r\n        otherTag: [\r\n            [\r\n                /\\{\\{/,\r\n                {\r\n                    token: '@rematch',\r\n                    switchTo: '@handlebarsInSimpleState.otherTag'\r\n                }\r\n            ],\r\n            [/\\/?>/, 'delimiter.html', '@pop'],\r\n            [/\"([^\"]*)\"/, 'attribute.value'],\r\n            [/'([^']*)'/, 'attribute.value'],\r\n            [/[\\w\\-]+/, 'attribute.name'],\r\n            [/=/, 'delimiter'],\r\n            [/[ \\t\\r\\n]+/] // whitespace\r\n        ],\r\n        // -- BEGIN <script> tags handling\r\n        // After <script\r\n        script: [\r\n            [\r\n                /\\{\\{/,\r\n                {\r\n                    token: '@rematch',\r\n                    switchTo: '@handlebarsInSimpleState.script'\r\n                }\r\n            ],\r\n            [/type/, 'attribute.name', '@scriptAfterType'],\r\n            [/\"([^\"]*)\"/, 'attribute.value'],\r\n            [/'([^']*)'/, 'attribute.value'],\r\n            [/[\\w\\-]+/, 'attribute.name'],\r\n            [/=/, 'delimiter'],\r\n            [\r\n                />/,\r\n                {\r\n                    token: 'delimiter.html',\r\n                    next: '@scriptEmbedded.text/javascript',\r\n                    nextEmbedded: 'text/javascript'\r\n                }\r\n            ],\r\n            [/[ \\t\\r\\n]+/],\r\n            [\r\n                /(<\\/)(script\\s*)(>)/,\r\n                ['delimiter.html', 'tag.html', { token: 'delimiter.html', next: '@pop' }]\r\n            ]\r\n        ],\r\n        // After <script ... type\r\n        scriptAfterType: [\r\n            [\r\n                /\\{\\{/,\r\n                {\r\n                    token: '@rematch',\r\n                    switchTo: '@handlebarsInSimpleState.scriptAfterType'\r\n                }\r\n            ],\r\n            [/=/, 'delimiter', '@scriptAfterTypeEquals'],\r\n            [\r\n                />/,\r\n                {\r\n                    token: 'delimiter.html',\r\n                    next: '@scriptEmbedded.text/javascript',\r\n                    nextEmbedded: 'text/javascript'\r\n                }\r\n            ],\r\n            [/[ \\t\\r\\n]+/],\r\n            [/<\\/script\\s*>/, { token: '@rematch', next: '@pop' }]\r\n        ],\r\n        // After <script ... type =\r\n        scriptAfterTypeEquals: [\r\n            [\r\n                /\\{\\{/,\r\n                {\r\n                    token: '@rematch',\r\n                    switchTo: '@handlebarsInSimpleState.scriptAfterTypeEquals'\r\n                }\r\n            ],\r\n            [\r\n                /\"([^\"]*)\"/,\r\n                {\r\n                    token: 'attribute.value',\r\n                    switchTo: '@scriptWithCustomType.$1'\r\n                }\r\n            ],\r\n            [\r\n                /'([^']*)'/,\r\n                {\r\n                    token: 'attribute.value',\r\n                    switchTo: '@scriptWithCustomType.$1'\r\n                }\r\n            ],\r\n            [\r\n                />/,\r\n                {\r\n                    token: 'delimiter.html',\r\n                    next: '@scriptEmbedded.text/javascript',\r\n                    nextEmbedded: 'text/javascript'\r\n                }\r\n            ],\r\n            [/[ \\t\\r\\n]+/],\r\n            [/<\\/script\\s*>/, { token: '@rematch', next: '@pop' }]\r\n        ],\r\n        // After <script ... type = $S2\r\n        scriptWithCustomType: [\r\n            [\r\n                /\\{\\{/,\r\n                {\r\n                    token: '@rematch',\r\n                    switchTo: '@handlebarsInSimpleState.scriptWithCustomType.$S2'\r\n                }\r\n            ],\r\n            [\r\n                />/,\r\n                {\r\n                    token: 'delimiter.html',\r\n                    next: '@scriptEmbedded.$S2',\r\n                    nextEmbedded: '$S2'\r\n                }\r\n            ],\r\n            [/\"([^\"]*)\"/, 'attribute.value'],\r\n            [/'([^']*)'/, 'attribute.value'],\r\n            [/[\\w\\-]+/, 'attribute.name'],\r\n            [/=/, 'delimiter'],\r\n            [/[ \\t\\r\\n]+/],\r\n            [/<\\/script\\s*>/, { token: '@rematch', next: '@pop' }]\r\n        ],\r\n        scriptEmbedded: [\r\n            [\r\n                /\\{\\{/,\r\n                {\r\n                    token: '@rematch',\r\n                    switchTo: '@handlebarsInEmbeddedState.scriptEmbedded.$S2',\r\n                    nextEmbedded: '@pop'\r\n                }\r\n            ],\r\n            [/<\\/script/, { token: '@rematch', next: '@pop', nextEmbedded: '@pop' }]\r\n        ],\r\n        // -- END <script> tags handling\r\n        // -- BEGIN <style> tags handling\r\n        // After <style\r\n        style: [\r\n            [\r\n                /\\{\\{/,\r\n                {\r\n                    token: '@rematch',\r\n                    switchTo: '@handlebarsInSimpleState.style'\r\n                }\r\n            ],\r\n            [/type/, 'attribute.name', '@styleAfterType'],\r\n            [/\"([^\"]*)\"/, 'attribute.value'],\r\n            [/'([^']*)'/, 'attribute.value'],\r\n            [/[\\w\\-]+/, 'attribute.name'],\r\n            [/=/, 'delimiter'],\r\n            [\r\n                />/,\r\n                {\r\n                    token: 'delimiter.html',\r\n                    next: '@styleEmbedded.text/css',\r\n                    nextEmbedded: 'text/css'\r\n                }\r\n            ],\r\n            [/[ \\t\\r\\n]+/],\r\n            [\r\n                /(<\\/)(style\\s*)(>)/,\r\n                ['delimiter.html', 'tag.html', { token: 'delimiter.html', next: '@pop' }]\r\n            ]\r\n        ],\r\n        // After <style ... type\r\n        styleAfterType: [\r\n            [\r\n                /\\{\\{/,\r\n                {\r\n                    token: '@rematch',\r\n                    switchTo: '@handlebarsInSimpleState.styleAfterType'\r\n                }\r\n            ],\r\n            [/=/, 'delimiter', '@styleAfterTypeEquals'],\r\n            [\r\n                />/,\r\n                {\r\n                    token: 'delimiter.html',\r\n                    next: '@styleEmbedded.text/css',\r\n                    nextEmbedded: 'text/css'\r\n                }\r\n            ],\r\n            [/[ \\t\\r\\n]+/],\r\n            [/<\\/style\\s*>/, { token: '@rematch', next: '@pop' }]\r\n        ],\r\n        // After <style ... type =\r\n        styleAfterTypeEquals: [\r\n            [\r\n                /\\{\\{/,\r\n                {\r\n                    token: '@rematch',\r\n                    switchTo: '@handlebarsInSimpleState.styleAfterTypeEquals'\r\n                }\r\n            ],\r\n            [\r\n                /\"([^\"]*)\"/,\r\n                {\r\n                    token: 'attribute.value',\r\n                    switchTo: '@styleWithCustomType.$1'\r\n                }\r\n            ],\r\n            [\r\n                /'([^']*)'/,\r\n                {\r\n                    token: 'attribute.value',\r\n                    switchTo: '@styleWithCustomType.$1'\r\n                }\r\n            ],\r\n            [\r\n                />/,\r\n                {\r\n                    token: 'delimiter.html',\r\n                    next: '@styleEmbedded.text/css',\r\n                    nextEmbedded: 'text/css'\r\n                }\r\n            ],\r\n            [/[ \\t\\r\\n]+/],\r\n            [/<\\/style\\s*>/, { token: '@rematch', next: '@pop' }]\r\n        ],\r\n        // After <style ... type = $S2\r\n        styleWithCustomType: [\r\n            [\r\n                /\\{\\{/,\r\n                {\r\n                    token: '@rematch',\r\n                    switchTo: '@handlebarsInSimpleState.styleWithCustomType.$S2'\r\n                }\r\n            ],\r\n            [\r\n                />/,\r\n                {\r\n                    token: 'delimiter.html',\r\n                    next: '@styleEmbedded.$S2',\r\n                    nextEmbedded: '$S2'\r\n                }\r\n            ],\r\n            [/\"([^\"]*)\"/, 'attribute.value'],\r\n            [/'([^']*)'/, 'attribute.value'],\r\n            [/[\\w\\-]+/, 'attribute.name'],\r\n            [/=/, 'delimiter'],\r\n            [/[ \\t\\r\\n]+/],\r\n            [/<\\/style\\s*>/, { token: '@rematch', next: '@pop' }]\r\n        ],\r\n        styleEmbedded: [\r\n            [\r\n                /\\{\\{/,\r\n                {\r\n                    token: '@rematch',\r\n                    switchTo: '@handlebarsInEmbeddedState.styleEmbedded.$S2',\r\n                    nextEmbedded: '@pop'\r\n                }\r\n            ],\r\n            [/<\\/style/, { token: '@rematch', next: '@pop', nextEmbedded: '@pop' }]\r\n        ],\r\n        // -- END <style> tags handling\r\n        handlebarsInSimpleState: [\r\n            [/\\{\\{\\{?/, 'delimiter.handlebars'],\r\n            [/\\}\\}\\}?/, { token: 'delimiter.handlebars', switchTo: '@$S2.$S3' }],\r\n            { include: 'handlebarsRoot' }\r\n        ],\r\n        handlebarsInEmbeddedState: [\r\n            [/\\{\\{\\{?/, 'delimiter.handlebars'],\r\n            [\r\n                /\\}\\}\\}?/,\r\n                {\r\n                    token: 'delimiter.handlebars',\r\n                    switchTo: '@$S2.$S3',\r\n                    nextEmbedded: '$S3'\r\n                }\r\n            ],\r\n            { include: 'handlebarsRoot' }\r\n        ],\r\n        handlebarsRoot: [\r\n            [/\"[^\"]*\"/, 'string.handlebars'],\r\n            [/[#/][^\\s}]+/, 'keyword.helper.handlebars'],\r\n            [/else\\b/, 'keyword.helper.handlebars'],\r\n            [/[\\s]+/],\r\n            [/[^}]/, 'variable.parameter.handlebars']\r\n        ]\r\n    }\r\n};\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/monaco-editor/esm/vs/basic-languages/handlebars/handlebars.js\n// module id = UIna\n// module chunks = 58"],"sourceRoot":""}