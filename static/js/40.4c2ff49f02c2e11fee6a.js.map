{"version":3,"sources":["webpack:///./node_modules/monaco-editor/esm/vs/basic-languages/pascaligo/pascaligo.js"],"names":["Object","defineProperty","__webpack_exports__","value","__webpack_require__","d","conf","language","comments","lineComment","blockComment","brackets","autoClosingPairs","open","close","surroundingPairs","defaultToken","tokenPostfix","ignoreCase","token","keywords","typeKeywords","operators","symbols","tokenizer","root","cases","@keywords","@default","include","@operators","comment","string","bracket","next","whitespace"],"mappings":"qDAAAA,OAAAC,eAAAC,EAAA,cAAAC,OAAA,IAAAC,EAAAC,EAAAH,EAAA,yBAAAI,IAAAF,EAAAC,EAAAH,EAAA,6BAAAK,IAIO,IAAAD,GACPE,UACAC,YAAA,KACAC,cAAA,YAEAC,WACA,IAAW,MACX,UACA,UACA,UAEAC,mBACSC,KAAA,IAASC,MAAA,MACTD,KAAA,IAAAC,MAAA,MACAD,KAAA,IAAAC,MAAA,MACAD,KAAA,IAAAC,MAAA,MACAD,KAAA,IAAAC,MAAA,MAETC,mBACSF,KAAA,IAASC,MAAA,MACTD,KAAA,IAAAC,MAAA,MACAD,KAAA,IAAAC,MAAA,MACAD,KAAA,IAAAC,MAAA,MACAD,KAAA,IAAAC,MAAA,OAGFP,GACPS,aAAA,GACAC,aAAA,aACAC,YAAA,EACAP,WACSE,KAAA,IAASC,MAAA,IAAYK,MAAA,oBACrBN,KAAA,IAAAC,MAAA,IAAAK,MAAA,qBACAN,KAAA,IAAAC,MAAA,IAAAK,MAAA,0BACAN,KAAA,IAAAC,MAAA,IAAAK,MAAA,oBAETC,UACA,QACA,QACA,OACA,QACA,OACA,MACA,OACA,MACA,OACA,WACA,KACA,KACA,MACA,KACA,SACA,SACA,OACA,OACA,OACA,MACA,QACA,OACA,SACA,OACA,eAEAC,cACA,OACA,MACA,OACA,MACA,MACA,SACA,SACA,OACA,UACA,MACA,MACA,OAEAC,WACA,IACA,IACA,IACA,KACA,KACA,KACA,IACA,KACA,MACA,MACA,KACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,KAGAC,QAAA,wBAEAC,WACAC,OAGA,kBAEAC,OACAC,aAAsCR,MAAA,cACtCS,WAAA,iBAKaC,QAAA,gBAEb,aAAiB,cACjB,iCAEA,YAEAH,OACAI,aAAA,YACAF,WAAA,OAKA,4CACA,sBAAiC,eACjC,iBAEA,QAAgB,cAEhB,qCACA,yBAEA,sBACA,uBACA,mBAGAG,UACA,uBAEA,0BACA,mBAEAC,SACA,qBACA,gCACA,KAAmBb,MAAA,eAAAc,QAAA,SAAAC,KAAA,UAEnBC,aACA,uBACA,8BACA","file":"static/js/40.4c2ff49f02c2e11fee6a.js","sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nexport var conf = {\r\n    comments: {\r\n        lineComment: '//',\r\n        blockComment: ['(*', '*)']\r\n    },\r\n    brackets: [\r\n        ['{', '}'],\r\n        ['[', ']'],\r\n        ['(', ')'],\r\n        ['<', '>']\r\n    ],\r\n    autoClosingPairs: [\r\n        { open: '{', close: '}' },\r\n        { open: '[', close: ']' },\r\n        { open: '(', close: ')' },\r\n        { open: '<', close: '>' },\r\n        { open: \"'\", close: \"'\" }\r\n    ],\r\n    surroundingPairs: [\r\n        { open: '{', close: '}' },\r\n        { open: '[', close: ']' },\r\n        { open: '(', close: ')' },\r\n        { open: '<', close: '>' },\r\n        { open: \"'\", close: \"'\" }\r\n    ]\r\n};\r\nexport var language = {\r\n    defaultToken: '',\r\n    tokenPostfix: '.pascaligo',\r\n    ignoreCase: true,\r\n    brackets: [\r\n        { open: '{', close: '}', token: 'delimiter.curly' },\r\n        { open: '[', close: ']', token: 'delimiter.square' },\r\n        { open: '(', close: ')', token: 'delimiter.parenthesis' },\r\n        { open: '<', close: '>', token: 'delimiter.angle' }\r\n    ],\r\n    keywords: [\r\n        'begin',\r\n        'block',\r\n        'case',\r\n        'const',\r\n        'else',\r\n        'end',\r\n        'fail',\r\n        'for',\r\n        'from',\r\n        'function',\r\n        'if',\r\n        'is',\r\n        'nil',\r\n        'of',\r\n        'remove',\r\n        'return',\r\n        'skip',\r\n        'then',\r\n        'type',\r\n        'var',\r\n        'while',\r\n        'with',\r\n        'option',\r\n        'None',\r\n        'transaction'\r\n    ],\r\n    typeKeywords: [\r\n        'bool',\r\n        'int',\r\n        'list',\r\n        'map',\r\n        'nat',\r\n        'record',\r\n        'string',\r\n        'unit',\r\n        'address',\r\n        'map',\r\n        'mtz',\r\n        'xtz'\r\n    ],\r\n    operators: [\r\n        '=',\r\n        '>',\r\n        '<',\r\n        '<=',\r\n        '>=',\r\n        '<>',\r\n        ':',\r\n        ':=',\r\n        'and',\r\n        'mod',\r\n        'or',\r\n        '+',\r\n        '-',\r\n        '*',\r\n        '/',\r\n        '@',\r\n        '&',\r\n        '^',\r\n        '%'\r\n    ],\r\n    // we include these common regular expressions\r\n    symbols: /[=><:@\\^&|+\\-*\\/\\^%]+/,\r\n    // The main tokenizer for our languages\r\n    tokenizer: {\r\n        root: [\r\n            // identifiers and keywords\r\n            [\r\n                /[a-zA-Z_][\\w]*/,\r\n                {\r\n                    cases: {\r\n                        '@keywords': { token: 'keyword.$0' },\r\n                        '@default': 'identifier'\r\n                    }\r\n                }\r\n            ],\r\n            // whitespace\r\n            { include: '@whitespace' },\r\n            // delimiters and operators\r\n            [/[{}()\\[\\]]/, '@brackets'],\r\n            [/[<>](?!@symbols)/, '@brackets'],\r\n            [\r\n                /@symbols/,\r\n                {\r\n                    cases: {\r\n                        '@operators': 'delimiter',\r\n                        '@default': ''\r\n                    }\r\n                }\r\n            ],\r\n            // numbers\r\n            [/\\d*\\.\\d+([eE][\\-+]?\\d+)?/, 'number.float'],\r\n            [/\\$[0-9a-fA-F]{1,16}/, 'number.hex'],\r\n            [/\\d+/, 'number'],\r\n            // delimiter: after number because of .\\d floats\r\n            [/[;,.]/, 'delimiter'],\r\n            // strings\r\n            [/'([^'\\\\]|\\\\.)*$/, 'string.invalid'],\r\n            [/'/, 'string', '@string'],\r\n            // characters\r\n            [/'[^\\\\']'/, 'string'],\r\n            [/'/, 'string.invalid'],\r\n            [/\\#\\d+/, 'string']\r\n        ],\r\n        /* */\r\n        comment: [\r\n            [/[^\\(\\*]+/, 'comment'],\r\n            //[/\\(\\*/,    'comment', '@push' ],    // nested comment  not allowed :-(\r\n            [/\\*\\)/, 'comment', '@pop'],\r\n            [/\\(\\*/, 'comment']\r\n        ],\r\n        string: [\r\n            [/[^\\\\']+/, 'string'],\r\n            [/\\\\./, 'string.escape.invalid'],\r\n            [/'/, { token: 'string.quote', bracket: '@close', next: '@pop' }]\r\n        ],\r\n        whitespace: [\r\n            [/[ \\t\\r\\n]+/, 'white'],\r\n            [/\\(\\*/, 'comment', '@comment'],\r\n            [/\\/\\/.*$/, 'comment']\r\n        ]\r\n    }\r\n};\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/monaco-editor/esm/vs/basic-languages/pascaligo/pascaligo.js\n// module id = YaM9\n// module chunks = 40"],"sourceRoot":""}